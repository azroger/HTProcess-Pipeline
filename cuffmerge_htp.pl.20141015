#!/usr/bin/perl -w

# Created by Roger Barthelson to run in the iPlant DE
# A step of the HTProcess pipeline
# Runs cuffmerge on all BAM files in input HTProcess_BAM directories 

use strict;
use Getopt::Std;
use Data::Dumper;

# use constant CUFFLINKS  => ('1.3.0' => '/usr/local2/cufflinks-1.3.0.Linux_x86_64/',
#                             '2.0.2' => '/usr/local2/cufflinks-2.0.2.Linux_x86_64/',
#                             '2.1.1' => '/usr/local2/cufflinks-2.1.1.Linux_x86_64/',
#                             '2.2.0' => '/usr/local2/cufflinks-2.2.0.Linux_x86_64/');
#my $cuffmerge = '/usr/local2/cufflinks-2.2.0.Linux_x86_64/cuffmerge';
#my $cuffmerge = '/home/rogerab/bin/cufflinks-2.2.1.Linux_x86_64/cuffmerge';
#my $pathway = 'PATH=$PATH:/usr/local2/cufflinks-2.2.0.Linux_x86_64/';
#system ($pathway);
#my $pathway2 = 'export PATH' ;
#system ($pathway2);
#system 'export PATH=/usr/local2/cufflinks-2.2.0.Linux_x86_64/';
#system 'printenv';
#system '/usr/local2/rogerab/HTProcess/turtle' ;

my %opts = (a=>'', b=>'', c=>'', d=>'', e=>'', f=>'', g=>'', h=>'', p=>'', r=>'', t=>'', u=>'',);
getopts('a:b:c:d:e:f:g:h:p:r:t:u', \%opts);
die("Usage:[-a $opts{a}] [-b $opts{b}] [-c $opts{c}] [-d $opts{d}] [-e $opts{e}] [-f $opts{f}] [-g $opts{g}] [-h $opts{h}] [-p $opts{p}] [-r $opts{r}] [-t $opts{t}] [-u $opts{u}] \n") if (@ARGV eq '' && -t STDIN);

my ($a, $b, $c, $d, $e, $f, $g, $h, $p, $r, $t , $u) = ($opts{a}, $opts{b}, $opts{c}, $opts{d}, $opts{e}, $opts{f}, $opts{g}, $opts{h}, $opts{p}, $opts{r}, $opts{t}, $opts{u});
print "$a, $b, $c, $d, $e, $f, $g, $h, $p, $r, $t, $u \n";

my ($anno_database, $user_anno_database, $seq_database, $user_seq_database, $minisofrac);

#GetOptions(	   
# 		   "indir1=s"           => \$query_dir1,
# 		   "indir2=s"           => \$query_dir2,
# 		   "indir3=s"           => \$query_dir3,
# 		   "indir4=s"           => \$query_dir4,
# 		   "indir5=s"           => \$query_dir5,
# 		   "indir6=s"           => \$query_dir6,
# 		   "indir7=s"           => \$query_dir7,
# 		   "indir8=s"           => \$query_dir8,
#		   "indir=s"           => \$query_dir,
#		   "infile=s"          => \@infile,
# 		   "user_annotation=s" => \$user_anno_database,
# 		   "annotation=s"      => \$anno_database,
# 		   "user_database=s"   => \$user_seq_database,
# 		   "database=s"        => \$seq_database,
# 		   "p=i"               => \$p,
# 		   "version=s"         => \$version,
# 		   "min-isoform-fraction=s" => \$minisofrac            
#		   );

$user_anno_database = $a;
$anno_database = $b;
$user_seq_database = $c;
$seq_database = $d;

my $grab ="grep Assembly-GTF_file HTProcess_Cufflinks*/manifest_file.txt | sed 's/!!!Assembly-GTF_file//' | sed 's/[^ ]*//' > gtf_to_merge.txt";
system ($grab);
#unless ($query_dir || @infile > 0) {
#    die "A query folder or list of files  required";
#}
my $migrate = "cp HTProcess_Cufflinks*/*.gtf ./";
system ($migrate);
# user supplied annotations/seqs trump the canned ones
if ($user_anno_database) {
    $anno_database = $user_anno_database;
}
if ($user_seq_database) {
    $seq_database = $user_seq_database;
}

#system '/usr/local2/rogerab/HTProcess/turtle' ;

my $cmd = "cuffmerge -o HTProcess_Cuffmerge ";
$cmd .= " -g $anno_database " if $anno_database;
$cmd .= " -s $seq_database "  if $seq_database;
$cmd .= " --min-isoform-fraction $minisofrac " if $minisofrac;
$cmd .= " -p 4 gtf_to_merge.txt ";
#my $logname1 = "logName=`ls | grep -m 1 'HTProcess_Cufflinks*' -`";
my $translog1 = "cat HTProcess_Cufflinks*/HTProcess.log >>HTProcess.log";
# my $logg1 = "Starting to run Cuffmerge >> HTProcess.log";
# my $logg2 = "$cmd >>HTProcess.log";
system ($translog1);
    open HTPLOG, ">>HTProcess.log" or die $!;
    print HTPLOG ".................................", "\n";
    print HTPLOG ".................................", "\n";
    print HTPLOG ".................................", "\n";
my $Time = localtime();
    print HTPLOG "HTProcess Cuffmerge starting!--$Time", "\n";
    print HTPLOG "$cmd", "\n";

report("Executing: $cmd");

system ($cmd);

#system "rm -f gtf_to_merge.txt";

my $success = -e "HTProcess_Cuffmerge/merged.gtf";


# convert the merged GTF into form that uses the original Transcript IDs
    print HTPLOG "$cmd", "\n";
    
open ANN, $anno_database or die $!;
my (%transcript2gene,%gene2alias);
while (<ANN>) {
    chomp;
    my ($gene_id) = /gene_id "([^\"]+)"/;
    my ($transcript_id) = /transcript_id "([^\"]+)"/;
    my ($alias) = /gene_name "([^\"]+)"/;
    $transcript2gene{$transcript_id} = $gene_id if $transcript_id;
    $gene2alias{$gene_id} = $alias if $alias;
}

open GTF, "HTProcess_Cuffmerge/merged.gtf" or die $!;
open OUT, ">HTProcess_Cuffmerge/merged_with_ref_ids.gtf" or die $!;

while (<GTF>) {
    chomp;
    my @gff  = split "\t";
    my $atts = pop @gff;
    my @atts = split('; ',$atts);
    my %atts = map {split} grep {s/\"|;//g} @atts;
    my ($class_code) = $atts{class_code} =~ /[=j]/;
    if ($class_code) {
	my ($oid) = $atts{oId};
	my ($tid) = $atts{nearest_ref} || 'null';
	my $gid = $transcript2gene{$tid} || $atts{gene_name};
	if ($gid) {
	    $atts{gene_id} = $gid;
	    $atts{gene_name} = $gene2alias{$gid} if $gene2alias{$gid};
	}
	if ($oid) {
	    $atts{transcript_id} = $oid;
	    delete $atts{oId};
	}
    }

    $atts = "gene_id $atts{gene_id}";
    delete $atts{gene_id};
    for my $k (keys %atts) {
	$atts .= "; $k \"$atts{$k}\"";
    }
    $gff[8] = $atts;

    print OUT join("\t",@gff), "\n";
}
system "cp HTProcess_Cuffmerge/merged.gtf ./";
close OUT;
close GTF;
system "cp HTProcess_Cuffmerge/merged_with_ref_ids.gtf ./";
system "cat HTProcess_Cufflinks*/manifest_file.txt >>HTProcess_Cuffmerge/manifest_file.txt";
system "echo '..............................................' >> HTProcess_Cuffmerge/manifest_file.txt";
system "echo '..............................................' >> HTProcess_Cuffmerge/manifest_file.txt";
system "echo 'Cuffmerge Output' >> HTProcess_Cuffmerge/manifest_file.txt";
system "echo '!!!CuffmergeOUTPUT merged_with_ref_ids.gtf' >> HTProcess_Cuffmerge/manifest_file.txt";
open MERGED, "gtf_to_merge.txt" or die $!;
  	while (my $line = <MERGED>) {
	chomp($line);
	print HTPLOG "$line \n";
	}
close MERGED;
my $Time2 = localtime();
    print HTPLOG "HTProcess Cuffmerge Finished!--$Time2 \n";
    close HTPLOG;
system "mv HTProcess.log HTProcess_Cuffmerge/";
$success ? exit 0 : exit 1;

sub report {
    print STDERR "$_[0]\n";
}

sub report_input_stack {
    my @stack = @ARGV;
    my %arg;

    while (@stack) {
        my $k = shift @stack;
	my $v = shift @stack;
        if ($v =~ /^-/) {
            unshift @stack, $v;
            $v = 'TRUE';
	}
        push @{$arg{$k}}, $v;
    }

    report("Input parameters:");
    for (sort keys %arg) {
        report(sprintf("%-25s",$_) . join(',',@{$arg{$_}}));
    }
}




